---
import { Image } from "@astrojs/image/components";
const { data, slugType } = Astro.props;
---

<div class="container">
  {
    data.map((post) => {
      const date = new Date(post.publishedAt);
      
      // get the day, month, and year from the date object
      const day = date.getDate();
      const month = date.getMonth() + 1;
      const year = date.getFullYear();

      // format the date as DD.MM.YYYY
      const formattedDate = `${day.toString().padStart(2, "0")}.${month
        .toString()
        .padStart(2, "0")}.${year.toString()}`;

      return (
        <div class="postWrapper">
          <div class="imageWrapper">
            <a href={`/blog/${slugType}/${post.slug}`}>
              <Image
                class="image-styles"
                src={post.imageUrl}
                alt={post.title}
                width={665}
                height={280}
                fit="cover"
                aspectRatio="575:280"
                format="webp"
                quality={90}
              />
            </a>
          </div>
          <div class="postTextContainer">
            <small id="hackedTextOtherArticles" data-value={`${formattedDate}`}>
              {formattedDate}
            </small>
            <h6>
              <a href={`/blog/${slugType}/${post.slug}`}>{post.title}</a>
            </h6>
          </div>
        </div>
      );
    })
  }
</div>

<script>
  function startLetterAnimation(target) {
    const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let interval = null;
    let iteration = 0;

    clearInterval(interval);

    interval = setInterval(() => {
      target.innerText = target.innerText
        .split("")
        .map((letter, index) => {
          if (index < iteration) {
            return target.dataset.value[index];
          }
          return letters[Math.floor(Math.random() * 26)];
          // ^ floor to avoid decimals
          // 26 bc 26 letters in {letters}
        })
        .join("");

      if (iteration >= target.dataset.value.length) {
        // set the max iteration count to the length of the word
        clearInterval(interval);
      }
      iteration += 1 / 2; // iteractions per letter
    }, 20); // speed of effect (lower = faster)
  }

  // select all elements with an id of "small"
  const smallElements = document.querySelectorAll("#hackedTextOtherArticles");
  // store the observer instances in an array
  const observers: IntersectionObserver[] = [];

  // create a new observer instance for each element in the smallElements array
  smallElements.forEach((element) => {
    const observer = new IntersectionObserver(
      (entries, observer) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setTimeout(() => {
              // if element is in view, start the animation
              startLetterAnimation(entry.target);
              observer.unobserve(entry.target); // stop observing the element after it is intersected once
            }, 50); // 100ms delay
          }
        });
      },
      { rootMargin: "0px" }
    );

    observer.observe(element);
    observers.push(observer);
  });

  smallElements.forEach((element, index) => {
    observers[index].observe(element);
  });
</script>

<style lang="scss">
  #small {
    font-family: monospace;
  }
  .postWrapper {
    position: relative;
  }

  .image-styles {
    transition: var(--hover-transition);
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .imageWrapper {
    position: relative;
    aspect-ratio: 575/280;
    width: 100%;
    height: auto;
    overflow: hidden;

    .image-styles:hover {
      transform: scale(1.05);
      filter: blur(2px) brightness(1.1) saturate(1.1);
      cursor: pointer;
    }
  }
  .container {
    grid-column: 2 / 3;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    position: relative;
    grid-gap: 3rem;
  }
  .postTextContainer {
    display: flex;
    align-items: flex-start;
    margin-top: 0.7rem;
    h6 {
      a {
        color: var(--color-text);
      }
      a:hover {
        filter: brightness(60%);
      }
      margin: 0;
      width: 80%;
    }
    small {
      margin-top: 0.3rem;
      margin-right: 1rem;
      width: auto;
      text-transform: uppercase;
      display: block;
    }
  }
  @media (max-width: 1280px) {
    .postWrapper {
      margin-bottom: 2rem;
    }
  }
  @media (max-width: 992px) {
    .postWrapper {
      margin-bottom: 1rem;
    }
  }
  @media (max-width: 768px) {
    .container {
      display: block;
    }
    .postWrapper {
      margin-bottom: 2rem;
    }
    .postTextContainer {
      small {
        width: auto;
      }
    }
  }
</style>
