---
import { Image } from "@astrojs/image/components";
import VisitArticleButton from "./VisitArticleButton.astro";
const { data } = Astro.props;
---

<div class="container">
  {
    data.map((post) => {
      const date = new Date(post.publishedAt);
      const suffixes = ["th", "st", "nd", "rd"];
      // Get the month, day, and year values from the Date object
      const month = date.toLocaleString("default", { month: "long" });
      const day = date.getDate();
      const year = date.getFullYear();

      // Determine the correct suffix for the day of the month
      const suffix = suffixes[(day - 20) % 10] || suffixes[day] || suffixes[0];

      // Construct the final formatted date string
      const formattedDate = `${month} ${day}${suffix}, ${year}`;
      return (
        <div class="postWrapper" key={post._id}>
          <div class="imageWrapper">
            <a href={`/blog/research/${post.slug}`}>
              <Image
                class="image-styles"
                src={`${post.imageUrl}`}
                alt={post.title}
                width={1115}
                height={500}
                fit="cover"
                aspectRatio="1155:500"
                format="webp"
                quality={90}
              />
            </a>
          </div>
          <div class="postTextContainer">
            <span>
              <small id="hackedText" data-value={`${formattedDate}`}>
                {formattedDate}
              </small>
              <h4>
                <a href={`/blog/research/${post.slug}`}>{post.title}</a>
              </h4>
            </span>
            <VisitArticleButton
              url={`/blog/research/${post.slug}`}
              colorPrimary="var(--color-green-light)"
              colorSecondary="var(--color-green-dark)"
            />
          </div>
        </div>
      );
    })
  }
</div>

<script>
  function startLetterAnimation(target) {
    const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let interval = null;
    let iteration = 0;

    clearInterval(interval);

    interval = setInterval(() => {
      target.innerText = target.innerText
        .split("")
        .map((letter, index) => {
          if (index < iteration) {
            return target.dataset.value[index];
          }
          return letters[Math.floor(Math.random() * 26)];
          // ^ floor to avoid decimals
          // 26 bc 26 letters in {letters}
        })
        .join("");

      if (iteration >= target.dataset.value.length) {
        // set the max iteration count to the length of the word
        clearInterval(interval);
      }
      iteration += 1 / 2; // iteractions per letter
    }, 20); // speed of effect (lower = faster)
  }

  // select all elements with an id of "small"
  const smallElements = document.querySelectorAll("#hackedText");
  // store the observer instances in an array
  const observers = [];

  // create a new observer instance for each element in the smallElements array
  smallElements.forEach((element) => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setTimeout(() => {
              // if element is in view, start the animation
              startLetterAnimation(entry.target);
            }, 50); // 50ms delay
          }
        });
      },
      { rootMargin: "0px", once: true }
    );

    observers.push(observer);
  });

  smallElements.forEach((element, index) => {
    observers[index].observe(element);
  });
</script>

<style lang="scss">
  .image-styles {
    transition: var(--hover-transition);
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .imageWrapper {
    // flex: 2;
    grid-column: 1 / 2;
    aspect-ratio: 1120/500;
    width: 100%;
    height: auto;
    overflow: hidden;
    .image-styles:hover {
      transform: scale(1.05);
      filter: blur(5px) brightness(1.1) saturate(1.1);
      cursor: pointer;
    }
  }
  .container {
    width: 100%;
    position: relative;
  }
  .postWrapper {
    padding: 3rem 0;
    padding-top: 0;

    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: auto;
    grid-gap: 0 3rem;
  }
  .postTextContainer {
    grid-column: 2 / 3;
    display: block;
    h4,
    a {
      color: var(--color-text);
    }
    a {
      letter-spacing: unset;
    }
    small {
      text-transform: uppercase;
      display: block;
      padding-bottom: 1rem;
    }
  }
  @media (max-width: 1280px) {
    .postWrapper {
      grid-gap: 0 2rem;
    }
  }
  @media (max-width: 992px) {
    .postWrapper {
      display: block;
    }
    .postTextContainer {
      padding-top: 1.5rem;
      small {
        padding-bottom: 0.5rem;
      }
    }
  }
</style>
